**FIXME**
component Z3 {
    type Relation;
}
*********

component Virt {
    let <<has affinity with>> : Z3.Relation.Equivalence;
    let <<has antiaffinity with>> : Z3.Relation.Symmetric;
    let <<can have affinity with>> : Z3.Relation.Equivalence;
    let <<can have antiaffinity with>> : Z3.Relation.Symmetric;
}

component Node {
    let virts : Virt*;
}

component Group {
    let nodes : Node*;
    let virts : Virt*;
    let fallbacks : Boolean;
    let is_restricted : Boolean;

    for all (node : Node, virt : Virt)
    {
        ** Physical membership
        (nodes <<has>> node and virts <<has>> virt) => node.virts <<can have>> virt;

        ** Restriction
        (nodes !<<has>> node and virts <<has>> virt and is_restricted) => node.virts !<<can have>> virt;
    };
}

component Cluster {
    let nodes : Node*;
    let groups : Group*;

    for all (group : Group, virt : Virt)
    {
        (groups <<has>> group and group.virts <<has>> virt) =>
            exists (node : Node)
            {
                 nodes <<has>> node;
                 node.virts <<has>> virt;
            };

        ** Non-restriction
        for all (node : Node)
        {
            (groups <<has>> group and nodes <<has>> node and group.virts <<has>> virt and !group.is_restricted) => node.virts <<can have>> virt;
        };
    };
}

** Node affinity
for all (node_1 : Node, node_2 : Node, virt_1 : Virt, virt_2 : Virt)
{
    (virt_1 != virt_2 and node_1.virts <<can have>> virt_1 and node_2.virts <<can have>> virt_2 and virt_1 <<has affinity with>> virt_2) => (node_1 = node_2);
    (node_1.virts <<has>> virt_1 and node_2.virts <<has>> virt_2 and virt_1 <<can have affinity with>> virt_2) => (node_1 = node_2);
};

** Node antiaffinity
for all (node_1 : Node, node_2 : Node, virt_1 : Virt, virt_2 : Virt)
{
    (node_1.virts <<can have>> virt_1 and node_2.virts <<can have>> virt_2 and virt_1 <<has antiaffinity with>> virt_2) => (node_1 != node_2);
    (node_1.virts <<has>> virt_1 and node_2.virts <<has>> virt_2 and virt_1 <<can have antiaffinity with>> virt_2) => (node_1 != node_2);
};

let node0 = Node();
let node1 = Node();
let node2 = Node();
let node3 = Node();
let node4 = Node();
let node5 = Node();
let node6 = Node();
let node7 = Node();
let node8 = Node();
let node9 = Node();
let node10 = Node();
let node11 = Node();
let node12 = Node();
assert (node0 != node1);
assert (node0 != node2);
assert (node0 != node3);
assert (node0 != node4);
assert (node0 != node5);
assert (node0 != node6);
assert (node0 != node7);
assert (node0 != node8);
assert (node0 != node9);
assert (node0 != node10);
assert (node0 != node11);
assert (node0 != node12);
assert (node1 != node2);
assert (node1 != node3);
assert (node1 != node4);
assert (node1 != node5);
assert (node1 != node6);
assert (node1 != node7);
assert (node1 != node8);
assert (node1 != node9);
assert (node1 != node10);
assert (node1 != node11);
assert (node1 != node12);
assert (node2 != node3);
assert (node2 != node4);
assert (node2 != node5);
assert (node2 != node6);
assert (node2 != node7);
assert (node2 != node8);
assert (node2 != node9);
assert (node2 != node10);
assert (node2 != node11);
assert (node2 != node12);
assert (node3 != node4);
assert (node3 != node5);
assert (node3 != node6);
assert (node3 != node7);
assert (node3 != node8);
assert (node3 != node9);
assert (node3 != node10);
assert (node3 != node11);
assert (node3 != node12);
assert (node4 != node5);
assert (node4 != node6);
assert (node4 != node7);
assert (node4 != node8);
assert (node4 != node9);
assert (node4 != node10);
assert (node4 != node11);
assert (node4 != node12);
assert (node5 != node6);
assert (node5 != node7);
assert (node5 != node8);
assert (node5 != node9);
assert (node5 != node10);
assert (node5 != node11);
assert (node5 != node12);
assert (node6 != node7);
assert (node6 != node8);
assert (node6 != node9);
assert (node6 != node10);
assert (node6 != node11);
assert (node6 != node12);
assert (node7 != node8);
assert (node7 != node9);
assert (node7 != node10);
assert (node7 != node11);
assert (node7 != node12);
assert (node8 != node9);
assert (node8 != node10);
assert (node8 != node11);
assert (node8 != node12);
assert (node9 != node10);
assert (node9 != node11);
assert (node9 != node12);
assert (node10 != node11);
assert (node10 != node12);
assert (node11 != node12);
let virt0 = Virt();
let virt1 = Virt();
let virt2 = Virt();
let virt3 = Virt();
let virt4 = Virt();
let virt5 = Virt();
let virt6 = Virt();
let virt7 = Virt();
let virt8 = Virt();
let virt9 = Virt();
let virt10 = Virt();
let virt11 = Virt();
let virt12 = Virt();
let virt13 = Virt();
let virt14 = Virt();
let virt15 = Virt();
let virt16 = Virt();
let virt17 = Virt();
let virt18 = Virt();
let virt19 = Virt();
let virt20 = Virt();
let virt21 = Virt();
let virt22 = Virt();
let virt23 = Virt();
let virt24 = Virt();
let virt25 = Virt();
let virt26 = Virt();
let virt27 = Virt();
let virt28 = Virt();
let virt29 = Virt();
let virt30 = Virt();
let virt31 = Virt();
let virt32 = Virt();
let virt33 = Virt();
let virt34 = Virt();
let virt35 = Virt();
let virt36 = Virt();
let virt37 = Virt();
let virt38 = Virt();
let virt39 = Virt();
let virt40 = Virt();
let virt41 = Virt();
let virt42 = Virt();
let virt43 = Virt();
let virt44 = Virt();
let virt45 = Virt();
let virt46 = Virt();
let virt47 = Virt();
let virt48 = Virt();
let virt49 = Virt();
let virt50 = Virt();
let virt51 = Virt();
let virt52 = Virt();
let group0 = Group { nodes <- ([node0; node1; node2; node3; node4; node5; node6; node7; node8; node9; node10; node11; node12]:Node*); virts <- ([virt0; virt1; virt2; virt3; virt4; virt5; virt6; virt7; virt8; virt9; virt10; virt11; virt12; virt13; virt14; virt15; virt16; virt17; virt18; virt19; virt20; virt21; virt22; virt23; virt24; virt25; virt26; virt27; virt28; virt29; virt30; virt31; virt32; virt33; virt34; virt35; virt36; virt37; virt38; virt39; virt40; virt41; virt42; virt43; virt44; virt45; virt46; virt47; virt48; virt49; virt50; virt51; virt52]:Virt*); is_restricted <- true; };
let cluster = Cluster { nodes <- [node0; node1; node2; node3; node4; node5; node6; node7; node8; node9; node10; node11; node12]; groups <- [group0]; };
assert(virt35 <<has affinity with>> virt50);
assert(virt46 <<has antiaffinity with>> virt50);
assert(virt17 <<has affinity with>> virt22);
assert(virt21 <<can have affinity with>> virt47);
assert(virt6 <<has antiaffinity with>> virt7);
assert(virt17 <<can have affinity with>> virt18);
assert(virt17 <<has antiaffinity with>> virt52);
assert(virt39 <<has affinity with>> virt47);
assert(virt11 <<can have affinity with>> virt52);
assert(virt8 <<has antiaffinity with>> virt30);
assert(virt9 <<can have affinity with>> virt46);
assert(virt5 <<has affinity with>> virt11);
assert(virt3 <<has antiaffinity with>> virt42);
assert(virt27 <<can have affinity with>> virt35);
assert(virt8 <<has antiaffinity with>> virt25);
assert(virt35 <<can have antiaffinity with>> virt45);
assert(virt38 <<can have antiaffinity with>> virt47);
assert(virt12 <<can have antiaffinity with>> virt39);
assert(virt4 <<can have antiaffinity with>> virt17);
assert(virt17 <<has affinity with>> virt19);
assert(virt12 <<can have affinity with>> virt18);
assert(virt0 <<can have affinity with>> virt36);
assert(virt23 <<has affinity with>> virt24);
assert(virt17 <<can have antiaffinity with>> virt48);
assert(virt35 <<can have affinity with>> virt46);
assert(virt21 <<can have affinity with>> virt31);
assert(virt30 <<can have affinity with>> virt45);
assert(virt16 <<has antiaffinity with>> virt50);
assert(virt1 <<has antiaffinity with>> virt44);
assert(virt36 <<can have affinity with>> virt44);
assert(virt15 <<has affinity with>> virt21);
assert(virt11 <<can have affinity with>> virt36);
assert(virt13 <<can have affinity with>> virt42);
assert(virt4 <<can have antiaffinity with>> virt44);
assert(virt1 <<has antiaffinity with>> virt47);
assert(virt4 <<has antiaffinity with>> virt30);
assert(virt10 <<has antiaffinity with>> virt30);
assert(virt41 <<has antiaffinity with>> virt52);
assert(virt28 <<has affinity with>> virt50);
assert(virt20 <<has antiaffinity with>> virt31);
assert(virt4 <<can have antiaffinity with>> virt6);
assert(virt19 <<can have affinity with>> virt21);
assert(virt7 <<can have affinity with>> virt41);
assert(virt5 <<has affinity with>> virt48);
assert(virt25 <<can have affinity with>> virt27);
assert(virt1 <<has affinity with>> virt31);
